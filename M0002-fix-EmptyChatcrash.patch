--- /opt/cmangos/tools/playerbots_original/playerbot/PlayerbotAI.cpp	2025-07-04 00:24:55.367350691 +0200
+++ src/modules/PlayerBots/playerbot/PlayerbotAI.cpp	2025-07-04 00:05:55.638349837 +0200
@@ -1098,6 +1098,8 @@
     while (!chatReplies.empty())
     {
         ChatQueuedReply holder = chatReplies.front();
+
+        // Skip if reply is scheduled for later
         time_t checkTime = holder.m_time;
         if (checkTime && time(0) < checkTime)
         {
@@ -1105,10 +1107,22 @@
             chatReplies.pop();
             continue;
         }
-        ChatReplyAction::ChatReplyDo(bot, holder.m_type, holder.m_guid1, holder.m_guid2, holder.m_msg, holder.m_chanName, holder.m_name);
+
+    // Safety check: skip if any required field is empty
+    if (holder.m_msg.empty() || holder.m_chanName.empty() || holder.m_name.empty())
+    {
+        sLog.outError("ChatReply skipped: Empty field in msg/channel/name");
         chatReplies.pop();
+        continue;
     }
 
+    // Process chat reply
+    ChatReplyAction::ChatReplyDo(bot, holder.m_type, holder.m_guid1, holder.m_guid2,
+                                 holder.m_msg, holder.m_chanName, holder.m_name);
+
+    chatReplies.pop(); // pop only AFTER the memory has been used
+}
+
     for (std::list<ChatQueuedReply>::iterator i = delayedResponses.begin(); i != delayedResponses.end(); ++i)
     {
         chatReplies.push(*i);
@@ -1729,8 +1743,9 @@
                     }
                 }
 
-                MANGOS_ASSERT(!message.empty());     
-                QueueChatResponse(msgtype, guid1, ObjectGuid(), message, chanName, name, isAiChat);
+	              if (message.empty() || chanName.empty() || name.empty())
+   	          	return;
+	            	QueueChatResponse(msgtype, guid1, ObjectGuid(), message.c_str(), chanName.c_str(), name.c_str(), isAiChat);
                 GetAiObjectContext()->GetValue<time_t>("last said", "chat")->Set(time(0) + urand(5, 25));
 
                 return;
@@ -8043,9 +8058,31 @@
     return false;
 }
 
-void PlayerbotAI::QueueChatResponse(uint32 msgType, ObjectGuid guid1, ObjectGuid guid2, std::string message, std::string chanName, std::string name, bool noDelay)
+void PlayerbotAI::QueueChatResponse(uint32 msgType, ObjectGuid guid1, ObjectGuid guid2,
+                                    const char* message, const char* chanName, const char* name, bool noDelay)
 {
-    chatReplies.push(ChatQueuedReply(msgType, guid1.GetCounter(), guid2.GetCounter(), message, chanName, name, time(0) + (noDelay ? 0 : urand(inCombat ? 15 : 10, inCombat ? 30 : 20))));
+    // Check for null pointers to prevent string constructor crashes
+    if (!message || !chanName || !name)
+    {
+        sLog.outError("QueueChatResponse skipped: message, chanName or name was null.");
+        return;
+    }
+
+    // Convert to std::string after validation
+    std::string msg(message);
+    std::string channel(chanName);
+    std::string sender(name);
+
+    // Push to reply queue
+    chatReplies.push(ChatQueuedReply(
+        msgType,
+        guid1.GetCounter(),
+        guid2.GetCounter(),
+        msg,
+        channel,
+        sender,
+        time(0) + (noDelay ? 0 : urand(inCombat ? 15 : 10, inCombat ? 30 : 20))
+    ));
 }
 
 bool PlayerbotAI::PlayAttackEmote(float chanceMultiplier)
--- /opt/cmangos/tools/playerbots_original/playerbot/PlayerbotAI.h	2025-07-04 00:24:55.367350691 +0200
+++ src/modules/PlayerBots/playerbot/PlayerbotAI.h	2025-07-04 00:05:55.638349837 +0200
@@ -376,7 +376,7 @@
     static std::string BotStateToString(BotState state);
 	std::string HandleRemoteCommand(std::string command);
     void HandleCommand(uint32 type, const std::string& text, Player& fromPlayer, const uint32 lang = LANG_UNIVERSAL);
-    void QueueChatResponse(uint32 msgType, ObjectGuid guid1, ObjectGuid guid2, std::string message, std::string chanName, std::string name, bool noDelay = false);
+    void QueueChatResponse(uint32 msgType, ObjectGuid guid1, ObjectGuid guid2, const char* message, const char* chanName, const char* name, bool noDelay = false);
 	void HandleBotOutgoingPacket(const WorldPacket& packet);
     void HandleMasterIncomingPacket(const WorldPacket& packet);
     void HandleMasterOutgoingPacket(const WorldPacket& packet);
